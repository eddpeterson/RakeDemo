# 1.  Create "Rakefile"

# 2. Add task
task :turn_off_alarm do
    puts "Turned off alarm. Would have liked 5 more minutes, though."
end

# 3. run rake task
rake turn_off_alarm

# 4. run taks that runs other taks
# add tasks to Rakefile
task :ready_for_the_day => [:turn_off_alarm, :groom_myself, :make_coffee, :walk_dog] do
  puts "Ready for the day!"
end
# run taks from cmd
rake ready_for_the_day

# 5. passing in values to rake task from command line 
rake COFFEE_CUPS=5 make_coffee

# 6. Rake supports the concept of namespaces which essentially lets you group together similar tasks inside of one namespace
namespace :morning do
    task :turn_of_alarm
    ....
end
rake COFFEE_CUPS=5 morning:ready_for_the_day

# 7. Rake default task
task :default => 'morning:turn_off_alarm'
# now you can run simply rake on command line
rake

# 8. Add desc to use rake -T command for listing all the tasks
desc "make coffee"
task :make_coffee do
  cups = ENV["COFFEE_CUPS"] || 2
  puts "Made #{cups} cups of coffee. Shakes are gone."
end
# view from command line list of rake tasks
rake -T

# 9. Invoking tasks
namespace :afternoon do
  desc "make coffe on afternoon"
  task :make_coffee do
    Rake::Task['morning:make_coffee'].invoke
    puts "Ready for the rest of the day!"
  end
end
# run rake from cmd line
rake afternoon:make_coffee COFFEE_CUPS=13

# You can get access to your models, and in fact, your whole environment by making tasks dependent on the environment task. This lets you do things like run rake RAILS_ENV=staging db:migrate. Rails will autmatically pick up tasks in lib/tasks. Any files named with the .rake extension will get picked up when you do rake -T

# Scheduling Rake Tasks
# You can use cron to schedule rake tasks. Letâ€™s say you wanted to run the account email expiration task every night at 12:15 on your production server, you might have something like this:
15 * * * * cd /data/my_app/current && /usr/bin/rake RAILS_ENV=production accounts:email_expiring

